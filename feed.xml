<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" hreflang="ko" /><updated>2025-10-25T21:15:17+09:00</updated><id>/feed.xml</id><title type="html">BGSMM</title><subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle><entry><title type="html">Xcode 에서 Info.plist 파일이 없을 때</title><link href="/posts/xcode-where-is-infoplist/" rel="alternate" type="text/html" title="Xcode 에서 Info.plist 파일이 없을 때" /><published>2025-10-25T13:12:00+09:00</published><updated>2025-10-25T13:12:00+09:00</updated><id>/posts/xcode-where-is-infoplist</id><content type="html" xml:base="/posts/xcode-where-is-infoplist/"><![CDATA[<h1 id="xcode-에서-infoplist-파일이-없을-때">Xcode 에서 Info.plist 파일이 없을 때</h1>

<p>Xcode 13부터 새로운 프로젝트에는 <strong>Info.plist</strong> 파일이 기본적으로 생성되지 않습니다. 대신 프로젝트 네비게이터에서 Target &gt; Info 탭을 통해 설정할 수 있습니다. 
Info.plist 파일이 사라진 것이 아니라 빌드 파일로 통합되었기 때문이며, 필요한 경우 새 Info.plist 파일을 생성하거나 기존 프로젝트에서 파일의 위치를 찾아서 확인할 수 있습니다.</p>

<h2 id="infoplist를-수정하는-방법">Info.plist를 수정하는 방법</h2>
<ol>
  <li>프로젝트 네비게이터에서 타겟 선택: 왼쪽 프로젝트 네비게이터에서 프로젝트 최상위 항목을 선택합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">Info</code> 탭 클릭: 우측의 설정 창에서 <code class="language-plaintext highlighter-rouge">Info</code> 탭을 클릭합니다.</li>
  <li>설정 추가: <code class="language-plaintext highlighter-rouge">Custom iOS Target Properties</code> 섹션에서 <code class="language-plaintext highlighter-rouge">+</code> 버튼을 눌러 원하는 키-값 쌍을 추가할 수 있습니다.</li>
</ol>

<p><img src="/assets/img/DevLog/swift-projectnavi-1.jpg" alt="프로젝트 내비게이터에서 선택" /></p>

<h2 id="infoplist-파일을-새롭게-생성하는-방법">Info.plist 파일을 새롭게 생성하는 방법</h2>
<ol>
  <li>새 파일 추가: Xcode 메뉴에서 <code class="language-plaintext highlighter-rouge">File &gt; New &gt; File...</code>을 선택합니다.</li>
  <li>Property List 선택: iOS 또는 macOS 탭에서 <code class="language-plaintext highlighter-rouge">Property List</code>를 선택하고 <code class="language-plaintext highlighter-rouge">Next</code>를 누릅니다.</li>
  <li>파일 이름 지정: 파일 이름을 <code class="language-plaintext highlighter-rouge">Info.plist</code>로 지정하고 <code class="language-plaintext highlighter-rouge">Create</code>를 누릅니다.</li>
  <li>프로젝트 설정 업데이트: 생성된 Info.plist 파일을 프로젝트의 <code class="language-plaintext highlighter-rouge">Build Settings &gt; Info.plist</code> 경로에 올바르게 설정합니다.</li>
</ol>

<h2 id="참고">참고</h2>
<ul>
  <li>Info.plist는 프로젝트를 생성할 때 빌드 파일로 흡수되어 디렉토리 상에 직접적으로 보이지 않을 수 있습니다.</li>
  <li>Info.plist는 애플리케이션의 기본적인 설정 정보를 담고 있으며, URL Scheme, 권한, 버전 등 다양한 정보를 담고 있습니다.</li>
  <li>Info.plist 파일의 전체 경로를 확인하기 위해<code class="language-plaintext highlighter-rouge"> Project &gt; Targets &gt; Info &gt; Custom iOS Target Properties</code> 에서 Info.plist의 full path를 복사하여 사용하거나, Info.plist 파일을 <code class="language-plaintext highlighter-rouge">Open as &gt; Source Code</code>로 열어 내용을 확인할 수 있습니다.</li>
</ul>]]></content><author><name>ayaysir(BGSMM)</name><email>your-email@example.com</email></author><category term="DevLog" /><category term="Xcode/iOS기타" /><category term="Swift" /><summary type="html"><![CDATA[Xcode 에서 Info.plist 파일이 없을 때]]></summary></entry><entry><title type="html">Swift: iOS에서 Custom URL Scheme 등록해서 url로 앱 열기</title><link href="/posts/swift-urlscheme/" rel="alternate" type="text/html" title="Swift: iOS에서 Custom URL Scheme 등록해서 url로 앱 열기" /><published>2025-10-25T13:11:00+09:00</published><updated>2025-10-25T13:11:00+09:00</updated><id>/posts/swift-urlscheme</id><content type="html" xml:base="/posts/swift-urlscheme/"><![CDATA[<h1 id="ios에서-custom-url-scheme-등록해서-url로-앱-열기">iOS에서 Custom URL Scheme 등록해서 url로 앱 열기</h1>

<p>iOS에서 Custom URL Scheme를 등록하는 방법입니다.</p>

<hr />

<h2 id="1-메인-앱에-url-scheme-등록">1. 메인 앱에 URL Scheme 등록</h2>

<p>먼저 ImageTranslator 앱의 Info.plist에 다음을 추가하세요.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;key&gt;</span>CFBundleURLTypes<span class="nt">&lt;/key&gt;</span>
<span class="nt">&lt;array&gt;</span>
  <span class="nt">&lt;dict&gt;</span>
    <span class="nt">&lt;key&gt;</span>CFBundleURLSchemes<span class="nt">&lt;/key&gt;</span>
    <span class="nt">&lt;array&gt;</span>
      <span class="nt">&lt;string&gt;</span>imagetranslator<span class="nt">&lt;/string&gt;</span> <span class="c">&lt;!-- 원하는 이름 --&gt;</span>
    <span class="nt">&lt;/array&gt;</span>
  <span class="nt">&lt;/dict&gt;</span>
<span class="nt">&lt;/array&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이것을 Property List 뷰로 보면 다음과 같습니다.</p>

<p><img src="/assets/img/DevLog/swift-propertylist-1.jpg" alt="Propety List View" /></p>

<p>→ 이렇게 하면 <code class="language-plaintext highlighter-rouge">imagetranslator://</code> 로 시작하는 URL을 iOS가 내 앱으로 연결해줍니다.</p>

<h3 id="참고-infoplist-파일이-없을-때">참고: Info.plist 파일이 없을 때</h3>
<ul>
  <li><a href="/posts/xcode-where-is-infoplist">Xcode에서 Info.plist 파일이 없을 때</a></li>
</ul>

<h2 id="2-메인-앱에서-url-감지">2. 메인 앱에서 URL 감지</h2>

<p>UIKit의 <code class="language-plaintext highlighter-rouge">SceneDelegate</code> 또는 <code class="language-plaintext highlighter-rouge">@main</code>의 SwiftUI App 구조에서 이 URL을 감지해야 합니다.</p>

<p>SceneDelegate 방식 (UIKit 기반)</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre><span class="kd">func</span> <span class="nf">scene</span><span class="p">(</span><span class="n">_</span> <span class="nv">scene</span><span class="p">:</span> <span class="kt">UIScene</span><span class="p">,</span> <span class="n">openURLContexts</span> <span class="kt">URLContexts</span><span class="p">:</span> <span class="kt">Set</span><span class="o">&lt;</span><span class="kt">UIOpenURLContext</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">guard</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="kt">URLContexts</span><span class="o">.</span><span class="n">first</span><span class="p">?</span><span class="o">.</span><span class="n">url</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
  <span class="k">if</span> <span class="n">url</span><span class="o">.</span><span class="n">absoluteString</span><span class="o">.</span><span class="nf">hasPrefix</span><span class="p">(</span><span class="s">"imagetranslator://open-from-extension"</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ✅ 해야 할 작업 작성</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>SwiftUI App 방식</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">@main</span>
<span class="kd">struct</span> <span class="kt">ImageTranslatorApp</span><span class="p">:</span> <span class="kt">App</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">Scene</span> <span class="p">{</span>
    <span class="kt">WindowGroup</span> <span class="p">{</span>
      <span class="kt">ContentView</span><span class="p">()</span>
        <span class="o">.</span><span class="n">onOpenURL</span> <span class="p">{</span> <span class="n">url</span> <span class="k">in</span>
          <span class="k">if</span> <span class="n">url</span><span class="o">.</span><span class="n">absoluteString</span><span class="o">.</span><span class="nf">hasPrefix</span><span class="p">(</span><span class="s">"imagetranslator://open-from-extension"</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// ✅ 해야 할 작업 작성</span>
          <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h2 id="3-url-로-앱-열기">3. URL 로 앱 열기</h2>
<ul>
  <li>사파리 등 웹 브라우저에서 주소창에 <code class="language-plaintext highlighter-rouge">imagetranslator://open-from-extension</code>를 입력하면 앱이 열리는지 확인합니다.</li>
</ul>]]></content><author><name>ayaysir(BGSMM)</name><email>your-email@example.com</email></author><category term="DevLog" /><category term="Swift" /><category term="Swift" /><summary type="html"><![CDATA[iOS에서 Custom URL Scheme 등록해서 url로 앱 열기]]></summary></entry><entry><title type="html">SwiftUI: 번역 기능 (Translation) 사용하기 (iOS 18 이상)</title><link href="/posts/swift-translation/" rel="alternate" type="text/html" title="SwiftUI: 번역 기능 (Translation) 사용하기 (iOS 18 이상)" /><published>2025-10-25T01:59:00+09:00</published><updated>2025-10-25T01:59:00+09:00</updated><id>/posts/swift-translation</id><content type="html" xml:base="/posts/swift-translation/"><![CDATA[<h1 id="swift-translation">Swift: Translation</h1>

<p>iOS <code class="language-plaintext highlighter-rouge">Translation</code> 프레임워크는 iOS 17.4부터 도입된 기능으로, 개발자가 앱 내에 텍스트 번역 기능을 쉽게 통합할 수 있도록 애플이 제공하는 API입니다. 특히 iOS 18에서는 이 기능이 더욱 발전하여, 시스템에서 제공하는 내장 UI를 활용하거나 TranslationSession을 이용해 커스텀된 번역 기능을 구현할 수 있게 되었습니다.</p>

<h2 id="주요-특징">주요 특징</h2>
<ul>
  <li>온디바이스 번역: 번역에 필요한 머신러닝 모델이 기기 내에서 실행되므로, 인터넷 연결 없이도 빠르고 안전하게 번역할 수 있습니다.</li>
  <li>시스템 통합: 사용자가 번역 모델을 다운로드하도록 권한을 요청하고, 다운로드 진행 상황을 표시하는 등 번역에 필요한 모든 과정을 시스템이 관리합니다.</li>
  <li>공유 모델: 한번 다운로드된 언어 모델은 시스템의 모든 앱이 공유하므로, 여러 앱에서 중복해서 다운로드할 필요가 없습니다.</li>
  <li>개인정보 보호: 번역이 기기 내에서 처리되기 때문에 개인 정보가 보호됩니다.</li>
</ul>

<h2 id="사용-방법">사용 방법</h2>
<p>Translation 프레임워크는 크게 두 가지 방식으로 사용할 수 있습니다.</p>

<h3 id="1-내장-ui-활용">1. 내장 UI 활용</h3>

<p>가장 간단한 방법으로, .translationPresentation 뷰 수정자를 사용해 시스템이 제공하는 번역 오버레이를 표시할 수 있습니다.</p>

<p>SwiftUI 예시:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre><span class="kd">import</span> <span class="kt">SwiftUI</span>
<span class="kd">import</span> <span class="kt">Translation</span> <span class="c1">// 👈</span>

<span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
  <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">textToTranslate</span> <span class="o">=</span> <span class="s">"Translationフレームワークは大きく二つの方式で使用できます。"</span>
  <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">showTranslation</span> <span class="o">=</span> <span class="kc">false</span>

  <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kt">VStack</span> <span class="p">{</span>
      <span class="kt">Text</span><span class="p">(</span><span class="n">textToTranslate</span><span class="p">)</span>
      <span class="kt">Button</span><span class="p">(</span><span class="s">"번역하기"</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">showTranslation</span><span class="o">.</span><span class="nf">toggle</span><span class="p">()</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="o">.</span><span class="nf">translationPresentation</span><span class="p">(</span><span class="nv">isPresented</span><span class="p">:</span> <span class="n">$showTranslation</span><span class="p">,</span> <span class="nv">text</span><span class="p">:</span> <span class="n">textToTranslate</span><span class="p">)</span> <span class="c1">// 👈</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/DevLog/swift-translation-1.jpg" alt="Swift Translation 1" /></p>

<p>뒤에 클로저(replacementAction)를 추가하면 번역 창에서 ‘번역으로 대치’라는 메뉴가 생기며 이 메뉴를 눌렀을 때 할 작업을 지정할 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="o">.</span><span class="nf">translationPresentation</span><span class="p">(</span><span class="nv">isPresented</span><span class="p">:</span> <span class="n">$showTranslation</span><span class="p">,</span> <span class="nv">text</span><span class="p">:</span> <span class="n">textToTranslate</span><span class="p">)</span> <span class="p">{</span> <span class="n">result</span> <span class="k">in</span>
  <span class="c1">// replacement action 핸들러</span>
  <span class="n">textToTranslate</span> <span class="o">=</span> <span class="n">result</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/DevLog/번역으로대치%20Oct-25-2025%2015-20-12.gif" alt="번역으로 대치" /></p>

<h3 id="2-translationtask를-이용한-커스텀-구현-上---시작시-바로-실행">2. translationTask를 이용한 커스텀 구현 (上) - 시작시 바로 실행</h3>

<p>더 세밀한 제어가 필요하다면 <code class="language-plaintext highlighter-rouge">translationTask</code> 를 사용해 직접 번역을 요청하고 결과를 처리할 수 있습니다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">source</code>, <code class="language-plaintext highlighter-rouge">target</code> 언어가 <code class="language-plaintext highlighter-rouge">nil</code>이면 소스 언어를 자동으로 감지하며, 타깃 언어를 현재 OS 에서 사용중인 언어(예: 한국어)를 제공합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">translationTask</code>의 action 클로저는 뷰가 초기화되면 자동으로 실행됩니다.
    <blockquote>
      <p><code class="language-plaintext highlighter-rouge">action</code>: A closure that runs when the view first appears, and when source or target change. It provides a TranslationSession instance to perform one or multiple translations. (뷰가 처음 나타날 때, 그리고 소스나 대상이 변경될 때 실행되는 클로저입니다. 하나 이상의 번역을 수행하기 위한 TranslationSession 인스턴스를 제공합니다.)</p>
    </blockquote>
  </li>
  <li>translationTask를 이용한 번역을 이용하려면 기기에 시작, 번역 언어의 데이터가 다운로드 되어있어야 합니다. 다운로드 되어있지 않은 경우 아래처럼 다운로드를 수행하는 시트가 나타납니다.
<img src="/assets/img/DevLog/swift-translationtask-1.jpg" alt="로컬에 언어 데이터가 다운로드 되어있어야 함" /></li>
</ul>

<p>SwiftUI 예시:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
</pre></td><td class="rouge-code"><pre><span class="kd">import</span> <span class="kt">SwiftUI</span>
<span class="kd">import</span> <span class="kt">Translation</span>

<span class="kd">struct</span> <span class="kt">CustomTranslationView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">sourceTexts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"Translationフレームワークは大きく二つの方式で使用できます。"</span><span class="p">,</span>
    <span class="s">"Explore the warehouse and watch our consolidation processes in action, where everything is carefully organized to keep operations running smoothly."</span><span class="p">,</span>
    <span class="s">"本機能は、プロデュース方針を決める事で、ゲーム内の様々な場面で、効率よくプロデュースを進める事ができるようになる機能です。"</span><span class="p">,</span>
    <span class="s">"And of course, we couldn’t resist a quick stop at the sky bar, where work meets a moment of relaxation."</span><span class="p">,</span>
    <span class="s">"プロデュース方針は場数ptを使って設定する事ができ、自分のプレイスタイルに合わせたカスタマイズが可能です。"</span>
  <span class="p">]</span>
  <span class="k">var</span> <span class="nv">sourceLanguage</span><span class="p">:</span> <span class="kt">Locale</span><span class="o">.</span><span class="kt">Language</span><span class="p">?</span>
  <span class="k">var</span> <span class="nv">targetLanguage</span><span class="p">:</span> <span class="kt">Locale</span><span class="o">.</span><span class="kt">Language</span><span class="p">?</span>
  
  <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">translatedText</span> <span class="o">=</span> <span class="s">""</span>
  
  <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">if</span> <span class="k">#available</span><span class="p">(</span><span class="n">iOS</span> <span class="mf">18.0</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span> <span class="p">{</span>
      <span class="kt">Text</span><span class="p">(</span><span class="n">translatedText</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">translationTask</span><span class="p">(</span>
          <span class="nv">source</span><span class="p">:</span> <span class="n">sourceLanguage</span><span class="p">,</span>
          <span class="nv">target</span><span class="p">:</span> <span class="n">targetLanguage</span>
        <span class="p">)</span> <span class="p">{</span> <span class="n">session</span> <span class="k">in</span>
          <span class="kt">Task</span> <span class="p">{</span> <span class="kd">@MainActor</span> <span class="k">in</span>
            <span class="k">for</span> <span class="n">sourceText</span> <span class="k">in</span> <span class="n">sourceTexts</span> <span class="p">{</span>
              <span class="k">let</span> <span class="nv">response</span> <span class="o">=</span> <span class="k">try</span> <span class="k">await</span> <span class="n">session</span><span class="o">.</span><span class="nf">translate</span><span class="p">(</span><span class="n">sourceText</span><span class="p">)</span>
              <span class="n">translatedText</span> <span class="o">+=</span> <span class="s">"</span><span class="se">\(</span><span class="n">response</span><span class="o">.</span><span class="n">targetText</span><span class="se">)\n</span><span class="s">"</span>
            <span class="p">}</span>
          <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="kt">Text</span><span class="p">(</span><span class="s">"Need iOS 18.0 or later"</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/DevLog/Translationn2%20Oct-25-2025%2020-52-14.gif" alt="Translation Task 1" /></p>

<h3 id="3-translationtask를-이용한-커스텀-구현-下---configuration-을-trigger하여-실행">3. translationTask를 이용한 커스텀 구현 (下) - configuration 을 trigger하여 실행</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">TranslationSession.Configuration</code> 이 <code class="language-plaintext highlighter-rouge">nil</code> 상태였다가 초기화하거나, 또는 source/target 언어가 변경된 경우 <code class="language-plaintext highlighter-rouge">action</code> 클로저가 트리거됩니다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
</pre></td><td class="rouge-code"><pre><span class="kd">import</span> <span class="kt">SwiftUI</span>
<span class="kd">import</span> <span class="kt">Translation</span>

<span class="kd">@available</span><span class="p">(</span><span class="n">iOS</span> <span class="mf">18.0</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span>
<span class="kd">struct</span> <span class="kt">CustomTranslationTriggerStartView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">sourceTexts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"Translationフレームワークは大きく二つの方式で使用できます。"</span><span class="p">,</span>
    <span class="s">"Explore the warehouse and watch our consolidation processes in action, where everything is carefully organized to keep operations running smoothly."</span><span class="p">,</span>
    <span class="s">"本機能は、プロデュース方針を決める事で、ゲーム内の様々な場面で、効率よくプロデュースを進める事ができるようになる機能です。"</span><span class="p">,</span>
    <span class="s">"And of course, we couldn’t resist a quick stop at the sky bar, where work meets a moment of relaxation."</span><span class="p">,</span>
    <span class="s">"プロデュース方針は場数ptを使って設定する事ができ、自分のプレイスタイルに合わせたカスタマイズが可能です。"</span>
  <span class="p">]</span>

  <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">translatedTexts</span> <span class="o">=</span> <span class="p">[</span><span class="kt">String</span><span class="p">](</span><span class="nv">repeating</span><span class="p">:</span> <span class="s">""</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="mi">5</span><span class="p">)</span>
  <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">isTranslating</span> <span class="o">=</span> <span class="kc">false</span>
  <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">selectedLanguageCode</span> <span class="o">=</span> <span class="s">"ko-KR"</span>
  <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">lastTranslatedLanguageCode</span> <span class="o">=</span> <span class="s">""</span>

  <span class="c1">// 구성 객체: 버튼으로 할당하면 translationTask에서 세션을 받음</span>
  <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">configuration</span><span class="p">:</span> <span class="kt">TranslationSession</span><span class="o">.</span><span class="kt">Configuration</span><span class="p">?</span>

  <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kt">VStack</span><span class="p">(</span><span class="nv">spacing</span><span class="p">:</span> <span class="mi">16</span><span class="p">)</span> <span class="p">{</span>
      <span class="kt">HStack</span> <span class="p">{</span>
        <span class="kt">Text</span><span class="p">(</span><span class="s">"Select target language:"</span><span class="p">)</span>
        <span class="kt">Picker</span><span class="p">(</span><span class="s">"Select target language"</span><span class="p">,</span> <span class="nv">selection</span><span class="p">:</span> <span class="n">$selectedLanguageCode</span><span class="p">)</span> <span class="p">{</span>
          <span class="kt">Text</span><span class="p">(</span><span class="s">"ko-KR"</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">tag</span><span class="p">(</span><span class="s">"ko-KR"</span><span class="p">)</span>
          <span class="kt">Text</span><span class="p">(</span><span class="s">"ja-JP"</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">tag</span><span class="p">(</span><span class="s">"ja-JP"</span><span class="p">)</span>
          <span class="kt">Text</span><span class="p">(</span><span class="s">"en-US"</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">tag</span><span class="p">(</span><span class="s">"en-US"</span><span class="p">)</span>
        <span class="p">}</span>
      <span class="p">}</span>
      
      <span class="kt">List</span> <span class="p">{</span>
        <span class="kt">ForEach</span><span class="p">(</span><span class="n">sourceTexts</span><span class="o">.</span><span class="n">indices</span><span class="p">,</span> <span class="nv">id</span><span class="p">:</span> <span class="p">\</span><span class="o">.</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">i</span> <span class="k">in</span>
          <span class="kt">VStack</span><span class="p">(</span><span class="nv">alignment</span><span class="p">:</span> <span class="o">.</span><span class="n">leading</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">Text</span><span class="p">(</span><span class="n">sourceTexts</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="kt">Text</span><span class="p">(</span><span class="n">translatedTexts</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
              <span class="o">.</span><span class="nf">foregroundStyle</span><span class="p">(</span><span class="o">.</span><span class="n">gray</span><span class="p">)</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>

      <span class="k">if</span> <span class="k">#available</span><span class="p">(</span><span class="n">iOS</span> <span class="mf">18.0</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">HStack</span> <span class="p">{</span>
          <span class="kt">Button</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">targetLanguage</span> <span class="o">=</span> <span class="kt">Locale</span><span class="o">.</span><span class="kt">Language</span><span class="p">(</span><span class="nv">identifier</span><span class="p">:</span> <span class="n">selectedLanguageCode</span><span class="p">)</span>
            <span class="c1">// 여기서 configruation 트리거</span>
            <span class="c1">// source, target 언어가 동일하면 트리거가 안됨</span>
            <span class="c1">// 둘 중 하나가 이전과 다르면 재 트리거됨</span>
            <span class="n">configuration</span> <span class="o">=</span> <span class="kt">TranslationSession</span><span class="o">.</span><span class="kt">Configuration</span><span class="p">(</span>
              <span class="nv">source</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span>
              <span class="nv">target</span><span class="p">:</span> <span class="n">targetLanguage</span>
            <span class="p">)</span>
          <span class="p">}</span> <span class="nv">label</span><span class="p">:</span> <span class="p">{</span>
            <span class="kt">HStack</span> <span class="p">{</span>
              <span class="k">if</span> <span class="n">isTranslating</span> <span class="p">{</span>
                <span class="kt">ProgressView</span><span class="p">()</span><span class="o">.</span><span class="nf">scaleEffect</span><span class="p">(</span><span class="mf">0.7</span><span class="p">)</span>
              <span class="p">}</span>
              <span class="k">let</span> <span class="nv">buttonText</span> <span class="o">=</span> <span class="n">selectedLanguageCode</span> <span class="o">==</span> <span class="n">lastTranslatedLanguageCode</span> <span class="p">?</span> <span class="s">"</span><span class="se">\(</span><span class="n">lastTranslatedLanguageCode</span><span class="se">)</span><span class="s"> 번역 완료"</span> <span class="p">:</span> <span class="s">"번역 시작"</span>
              <span class="kt">Text</span><span class="p">(</span><span class="n">isTranslating</span> <span class="p">?</span> <span class="s">"번역 중..."</span> <span class="p">:</span> <span class="n">buttonText</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="o">.</span><span class="nf">padding</span><span class="p">(</span><span class="o">.</span><span class="n">horizontal</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">padding</span><span class="p">(</span><span class="o">.</span><span class="n">vertical</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="kt">Color</span><span class="o">.</span><span class="n">accentColor</span><span class="o">.</span><span class="nf">opacity</span><span class="p">(</span><span class="mf">0.1</span><span class="p">))</span>
            <span class="o">.</span><span class="nf">cornerRadius</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
          <span class="p">}</span>
          <span class="o">.</span><span class="nf">disabled</span><span class="p">(</span><span class="n">selectedLanguageCode</span> <span class="o">==</span> <span class="n">lastTranslatedLanguageCode</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="nf">padding</span><span class="p">()</span>
        <span class="c1">// translationTask 수식어: configuration이 설정되면 closure로 session을 받습니다.</span>
        <span class="o">.</span><span class="nf">translationTask</span><span class="p">(</span><span class="n">configuration</span><span class="p">)</span> <span class="p">{</span> <span class="n">session</span> <span class="k">in</span>
          <span class="c1">// 세션 제공 시에 배치 번역 실행</span>
          <span class="kt">Task</span> <span class="p">{</span>
            <span class="k">await</span> <span class="kt">MainActor</span><span class="o">.</span><span class="n">run</span> <span class="p">{</span>
              <span class="n">translatedTexts</span> <span class="o">=</span> <span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="s">""</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="mi">5</span><span class="p">)</span>
              <span class="n">isTranslating</span> <span class="o">=</span> <span class="kc">true</span>
            <span class="p">}</span>

            <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">sourceTexts</span><span class="o">.</span><span class="n">indices</span> <span class="p">{</span>
              <span class="k">let</span> <span class="nv">response</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="k">await</span> <span class="n">session</span><span class="o">.</span><span class="nf">translate</span><span class="p">(</span><span class="n">sourceTexts</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
              <span class="n">translatedTexts</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">response</span><span class="p">?</span><span class="o">.</span><span class="n">targetText</span> <span class="p">??</span> <span class="n">sourceTexts</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="p">}</span>
            
            <span class="c1">// 번역 완료되면 상태 업데이트</span>
            <span class="k">await</span> <span class="kt">MainActor</span><span class="o">.</span><span class="n">run</span> <span class="p">{</span>
              <span class="n">isTranslating</span> <span class="o">=</span> <span class="kc">false</span>
              <span class="n">lastTranslatedLanguageCode</span> <span class="o">=</span> <span class="n">selectedLanguageCode</span>
            <span class="p">}</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="kt">Text</span><span class="p">(</span><span class="s">"iOS 18 이상 필요"</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="/assets/img/DevLog/Translation3%20Oct-25-2025%2021-00-03.gif" alt="Translation Task 2" /></p>

<h2 id="지원-범위">지원 범위</h2>
<ul>
  <li>OS: iOS 17.4 이상, iPadOS 17.4 이상, macOS 14.4 이상 (대부분의 API는 iOS 18, iPadOS 18, macOS 15부터 SwiftUI 환경에서 사용 가능).</li>
  <li>Xcode: Xcode 16 이상.</li>
</ul>]]></content><author><name>ayaysir(BGSMM)</name><email>your-email@example.com</email></author><category term="DevLog" /><category term="SwiftUI" /><category term="SwiftUI" /><summary type="html"><![CDATA[Swift: Translation]]></summary></entry><entry><title type="html">Swift: Action Extension에서 extensionContext가 iOS 18에서 작동하지 않는 문제</title><link href="/posts/swift-extensioncontext-error-ios18/" rel="alternate" type="text/html" title="Swift: Action Extension에서 extensionContext가 iOS 18에서 작동하지 않는 문제" /><published>2025-10-24T23:11:00+09:00</published><updated>2025-10-24T23:11:00+09:00</updated><id>/posts/swift-extensioncontext-error-ios18</id><content type="html" xml:base="/posts/swift-extensioncontext-error-ios18/"><![CDATA[<h1 id="소개">소개</h1>

<p>iOS 18부터 <strong>Action Extension에서 메인 앱을 여는(openURL) 기능이 동작하지 않는 문제</strong> (iOS 17 이하에서는 정상 동작했음) 에 대한 해결방법 요약입니다.</p>

<h3 id="원문-링크">원문 링크</h3>
<ul>
  <li><a href="https://stackoverflow.com/questions/79077018/unable-to-open-main-app-from-action-extension-in-ios-18-previously-working-met">Stack Overflow</a></li>
</ul>

<hr />

<h2 id="문제-개요">문제 개요</h2>

<ul>
  <li>
    <p>개발자가 만든 앱(<code class="language-plaintext highlighter-rouge">Voicepaper</code>)의 <strong>Action Extension</strong>에서 <code class="language-plaintext highlighter-rouge">extensionContext</code>를 사용해 메인 앱을 여는 코드가
iOS 17까지는 잘 작동했으나, <strong>iOS 18에서는 더 이상 동작하지 않음.</strong></p>
  </li>
  <li>
    <p>기존 코드 예시:</p>
  </li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kd">func</span> <span class="nf">openVoicepaperApp</span><span class="p">(</span><span class="nv">path</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"voicepaper2://"</span> <span class="o">+</span> <span class="n">path</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">extensionContext</span><span class="p">?</span><span class="o">.</span><span class="nf">open</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nv">completionHandler</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<ul>
  <li>iOS 18에서는 <strong>두 방식 모두 실패</strong>
→ 메인 앱으로 전환되지 않음, 복원 프로세스 시작 불가.</li>
</ul>

<h2 id="원인">원인</h2>

<ul>
  <li><strong>iOS 18에서 Extension 내부의 URL Scheme 호출 관련 API가 변경 및 제한됨</strong></li>
  <li><code class="language-plaintext highlighter-rouge">extensionContext?.open()</code> 과 <code class="language-plaintext highlighter-rouge">perform(#selector(openURL:))</code> 방식이
더 이상 허용되지 않거나, 호출이 무시됨.</li>
</ul>

<h2 id="해결책--nivedi-manavadariya-제안-ios-18-대응-확인됨">해결책 ① (Nivedi Manavadariya 제안, iOS 18 대응 확인됨)</h2>

<p>아래 코드를 사용하면 iOS 18에서도 메인 앱 실행 가능:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="c1">/// Redirect To App</span>
<span class="kd">func</span> <span class="nf">redirectToApp</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">urlString</span> <span class="o">=</span> <span class="s">"Your URL"</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">redirectionURL</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="n">urlString</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"Redirecting to URL: </span><span class="se">\(</span><span class="n">urlString</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="nf">openURL</span><span class="p">(</span><span class="n">redirectionURL</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">/// Open URL Code</span>
<span class="kd">@objc</span> <span class="kd">@discardableResult</span> <span class="kd">func</span> <span class="nf">openURL</span><span class="p">(</span><span class="n">_</span> <span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">responder</span><span class="p">:</span> <span class="kt">UIResponder</span><span class="p">?</span> <span class="o">=</span> <span class="k">self</span>
    <span class="k">while</span> <span class="n">responder</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">application</span> <span class="o">=</span> <span class="n">responder</span> <span class="k">as?</span> <span class="kt">UIApplication</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">#available</span><span class="p">(</span><span class="n">iOS</span> <span class="mf">18.0</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">application</span><span class="o">.</span><span class="nf">open</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[:],</span> <span class="nv">completionHandler</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span> <span class="c1">// 👈</span>
                <span class="k">return</span> <span class="kc">true</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="n">application</span><span class="o">.</span><span class="nf">perform</span><span class="p">(</span><span class="k">#selector</span><span class="p">(</span><span class="nf">openURL</span><span class="p">(</span><span class="nv">_</span><span class="p">:)),</span> <span class="nv">with</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">nil</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">responder</span> <span class="o">=</span> <span class="n">responder</span><span class="p">?</span><span class="o">.</span><span class="n">next</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">false</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="핵심-포인트">핵심 포인트:</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">UIApplication</code> 인스턴스를 <strong>responder chain을 통해 직접 탐색</strong></li>
  <li>iOS 18에서는 <code class="language-plaintext highlighter-rouge">application.open()</code> 을 명시적으로 호출해야 함
(기존 <code class="language-plaintext highlighter-rouge">extensionContext?.open()</code>은 무시됨)</li>
  <li>이 방식으로 iOS 18에서도 정상 동작 확인됨.</li>
</ul>

<h2 id="해결책--shishir-jha-제안-ios-1718-모두-호환">해결책 ② (Shishir Jha 제안, iOS 17~18 모두 호환)</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="rouge-code"><pre><span class="kd">func</span> <span class="nf">openMainApp</span><span class="p">(</span><span class="n">_</span> <span class="nv">hostValue</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"yourapp://</span><span class="se">\(</span><span class="n">hostValue</span><span class="se">)</span><span class="s">"</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    <span class="nf">openURL</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">@discardableResult</span>
<span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">openURL</span><span class="p">(</span><span class="n">_</span> <span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">responder</span><span class="p">:</span> <span class="kt">UIResponder</span><span class="p">?</span> <span class="o">=</span> <span class="k">self</span>
    <span class="k">while</span> <span class="n">responder</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">application</span> <span class="o">=</span> <span class="n">responder</span> <span class="k">as?</span> <span class="kt">UIApplication</span> <span class="p">{</span>
            <span class="n">application</span><span class="o">.</span><span class="nf">open</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="p">[:])</span> <span class="p">{</span> <span class="n">success</span> <span class="k">in</span>
                <span class="k">if</span> <span class="n">success</span> <span class="p">{</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"App opened successfully"</span><span class="p">)</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"Failed to open app"</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="kc">true</span>
        <span class="p">}</span>
        <span class="n">responder</span> <span class="o">=</span> <span class="n">responder</span><span class="p">?</span><span class="o">.</span><span class="n">next</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">false</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>이 코드 역시 <code class="language-plaintext highlighter-rouge">UIApplication</code>을 responder chain으로 찾아서 직접 <code class="language-plaintext highlighter-rouge">open(_:options:)</code>을 호출하기 때문에 iOS 18에서도 안정적으로 작동.</p>

<h2 id="요약-정리">요약 정리</h2>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>iOS 17 이전</th>
      <th>iOS 18 이후</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">extensionContext?.open()</code></td>
      <td>정상 작동</td>
      <td>무시됨</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">perform(#selector(openURL:))</code></td>
      <td>작동</td>
      <td>더 이상 권장되지 않음</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">UIApplication.open(url:)</code> 직접 호출</td>
      <td> </td>
      <td>(권장 방식)</td>
    </tr>
    <tr>
      <td>Extension → App 전환 가능 여부</td>
      <td>가능</td>
      <td>여전히 가능 (새 코드 필요)</td>
    </tr>
  </tbody>
</table>]]></content><author><name>ayaysir(BGSMM)</name><email>your-email@example.com</email></author><category term="DevLog" /><category term="Swift" /><category term="SwiftUI" /><summary type="html"><![CDATA[소개]]></summary></entry><entry><title type="html">Swift: Action Extension으로 사진을 내 앱으로 전송하기</title><link href="/posts/swift-action-extension/" rel="alternate" type="text/html" title="Swift: Action Extension으로 사진을 내 앱으로 전송하기" /><published>2025-10-24T21:11:00+09:00</published><updated>2025-10-24T21:11:00+09:00</updated><id>/posts/swift-action-extension</id><content type="html" xml:base="/posts/swift-action-extension/"><![CDATA[<h1 id="swift-actionextension으로-사진을-내-앱으로-전송하기">Swift: ActionExtension으로 사진을 내 앱으로 전송하기</h1>

<p>“Action Extension으로 사진을 내 앱에 넘기는 방법”은 Share Extension과 비슷하지만,
Action Extension은 ‘공유’가 아니라 원본 앱의 컨텍스트 안에서 바로 실행되는 확장(App Extension) 입니다.
즉, 사용자가 사진 앱, 파일 앱 등에서 “공유” 메뉴 대신 “작업(Action)” 메뉴에서 내 앱을 실행할 수 있게 해줍니다.</p>

<p>아래는 사진 앱에서 이미지를 선택 → 내 앱의 Action Extension 실행 → 원본 앱으로 이미지 전달하는 전체 흐름과 코드 예시입니다.</p>

<hr />

<h2 id="방법">방법</h2>

<h3 id="1-action-extension-target-생성">1) Action Extension Target 생성</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>1.	Xcode → File → New → Target…
2.	iOS → Application Extension → Action Extension 선택
3.	이름 예: ImageTranslatorActionExtension
4.	“Include UI Extension” 선택
5.	완료 후, ActionViewController.swift 파일이 자동 생성됩니다.
</pre></td></tr></tbody></table></code></pre></div></div>

<p>⸻</p>

<h3 id="2-infoplist-설정-action-extension-프로젝트에">2) Info.plist 설정 (Action Extension 프로젝트에)</h3>

<p>Action Extension이 어떤 타입의 콘텐츠를 받을지 지정해야 합니다.
<code class="language-plaintext highlighter-rouge">Info.plist</code>의 <code class="language-plaintext highlighter-rouge">NSExtension</code> 항목을 다음과 같이 수정하세요:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="rouge-code"><pre><span class="nt">&lt;key&gt;</span>NSExtension<span class="nt">&lt;/key&gt;</span>
<span class="nt">&lt;dict&gt;</span>
  <span class="nt">&lt;key&gt;</span>NSExtensionAttributes<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;dict&gt;</span>
    <span class="c">&lt;!-- 이미지를 받을 수 있도록 설정 --&gt;</span>
    <span class="nt">&lt;key&gt;</span>NSExtensionActivationRule<span class="nt">&lt;/key&gt;</span>
    <span class="nt">&lt;dict&gt;</span>
      <span class="nt">&lt;key&gt;</span>NSExtensionActivationSupportsImageWithMaxCount<span class="nt">&lt;/key&gt;</span>
      <span class="nt">&lt;integer&gt;</span>1<span class="nt">&lt;/integer&gt;</span>
    <span class="nt">&lt;/dict&gt;</span>
  <span class="nt">&lt;/dict&gt;</span>
  <span class="nt">&lt;key&gt;</span>NSExtensionPointIdentifier<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;string&gt;</span>com.apple.ui-services<span class="nt">&lt;/string&gt;</span>
  <span class="nt">&lt;key&gt;</span>NSExtensionPrincipalClass<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;string&gt;</span>$(PRODUCT_MODULE_NAME).ActionViewController<span class="nt">&lt;/string&gt;</span>
<span class="nt">&lt;/dict&gt;</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="3-actionviewcontrollerswift-구현-action-extension-프로젝트에">3) ActionViewController.swift 구현 (Action Extension 프로젝트에)</h3>

<p>이제 사진(이미지 데이터)을 가져오고, 내 앱으로 전달하는 코드를 작성합니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
</pre></td><td class="rouge-code"><pre><span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">UniformTypeIdentifiers</span>

<span class="kd">class</span> <span class="kt">ActionViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
  
  <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
    <span class="nf">handleInputImage</span><span class="p">()</span>
  <span class="p">}</span>
  
  <span class="kd">private</span> <span class="kd">func</span> <span class="nf">handleInputImage</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 확장에서 받은 데이터 가져오기</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">extensionItem</span> <span class="o">=</span> <span class="n">extensionContext</span><span class="p">?</span><span class="o">.</span><span class="n">inputItems</span><span class="o">.</span><span class="n">first</span> <span class="k">as?</span> <span class="kt">NSExtensionItem</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">attachments</span> <span class="o">=</span> <span class="n">extensionItem</span><span class="o">.</span><span class="n">attachments</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    
    <span class="k">for</span> <span class="n">provider</span> <span class="k">in</span> <span class="n">attachments</span> <span class="p">{</span>
      <span class="c1">// iOS 14 이상은 UTType.image</span>
      <span class="k">if</span> <span class="n">provider</span><span class="o">.</span><span class="nf">hasItemConformingToTypeIdentifier</span><span class="p">(</span><span class="kt">UTType</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">identifier</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">provider</span><span class="o">.</span><span class="nf">loadItem</span><span class="p">(</span><span class="nv">forTypeIdentifier</span><span class="p">:</span> <span class="kt">UTType</span><span class="o">.</span><span class="n">image</span><span class="o">.</span><span class="n">identifier</span><span class="p">,</span> <span class="nv">options</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span> <span class="p">{</span> <span class="n">item</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
          <span class="k">if</span> <span class="k">let</span> <span class="nv">error</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"이미지 로드 오류:"</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
            <span class="k">return</span>
          <span class="p">}</span>
          
          <span class="k">var</span> <span class="nv">image</span><span class="p">:</span> <span class="kt">UIImage</span><span class="p">?</span>
          
          <span class="k">if</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="n">item</span> <span class="k">as?</span> <span class="kt">URL</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="kt">Data</span><span class="p">(</span><span class="nv">contentsOf</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="p">{</span>
              <span class="n">image</span> <span class="o">=</span> <span class="kt">UIImage</span><span class="p">(</span><span class="nv">data</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
            <span class="p">}</span>
          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="k">let</span> <span class="nv">uiImage</span> <span class="o">=</span> <span class="n">item</span> <span class="k">as?</span> <span class="kt">UIImage</span> <span class="p">{</span>
            <span class="n">image</span> <span class="o">=</span> <span class="n">uiImage</span>
          <span class="p">}</span>
          
          <span class="k">if</span> <span class="k">let</span> <span class="nv">image</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="nf">saveImageToAppGroup</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="kd">private</span> <span class="kd">func</span> <span class="nf">saveImageToAppGroup</span><span class="p">(</span><span class="n">_</span> <span class="nv">image</span><span class="p">:</span> <span class="kt">UIImage</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">image</span><span class="o">.</span><span class="nf">pngData</span><span class="p">()</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    
    <span class="c1">// App Group 경로 (메인 앱과 공유)</span>
    <span class="k">if</span> <span class="k">let</span> <span class="nv">containerURL</span> <span class="o">=</span> <span class="kt">FileManager</span><span class="o">.</span><span class="k">default</span><span class="o">.</span><span class="nf">containerURL</span><span class="p">(</span><span class="nv">forSecurityApplicationGroupIdentifier</span><span class="p">:</span> <span class="s">"group.com.yourcompany.imagetranslator"</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">let</span> <span class="nv">fileURL</span> <span class="o">=</span> <span class="n">containerURL</span><span class="o">.</span><span class="nf">appendingPathComponent</span><span class="p">(</span><span class="s">"action_shared_image.png"</span><span class="p">)</span>
      <span class="k">try</span><span class="p">?</span> <span class="n">data</span><span class="o">.</span><span class="nf">write</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="n">fileURL</span><span class="p">)</span>
      <span class="nf">print</span><span class="p">(</span><span class="s">"공유 이미지 저장 완료: </span><span class="se">\(</span><span class="n">fileURL</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// 완료 후 원래 앱으로 돌아감</span>
    <span class="n">extensionContext</span><span class="p">?</span><span class="o">.</span><span class="nf">completeRequest</span><span class="p">(</span><span class="nv">returningItems</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="4--app-group-설정">4)  App Group 설정</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>1.	메인 앱과 Action Extension 두 타깃 모두 `Signing &amp; Capabilities → + Capability → App Groups` 추가
2.	동일한 그룹 ID 생성: `group.com.yourcompany.imagetranslator`
3.	위 코드에서 동일한 ID 사용.
</pre></td></tr></tbody></table></code></pre></div></div>

<p><img src="" alt="App Group 설정" /></p>

<h3 id="5-메인-앱에서-이미지-불러오기">5) 메인 앱에서 이미지 불러오기</h3>

<p>Action Extension에서 저장한 이미지는 메인 앱에서도 같은 App Group 경로를 통해 접근할 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
</pre></td><td class="rouge-code"><pre><span class="kd">func</span> <span class="nf">loadSharedImageFromAction</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">UIImage</span><span class="p">?</span> <span class="p">{</span>
  <span class="k">if</span> <span class="k">let</span> <span class="nv">containerURL</span> <span class="o">=</span> <span class="kt">FileManager</span><span class="o">.</span><span class="k">default</span><span class="o">.</span><span class="nf">containerURL</span><span class="p">(</span><span class="nv">forSecurityApplicationGroupIdentifier</span><span class="p">:</span> <span class="s">"group.com.yourcompany.imagetranslator"</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">fileURL</span> <span class="o">=</span> <span class="n">containerURL</span><span class="o">.</span><span class="nf">appendingPathComponent</span><span class="p">(</span><span class="s">"action_shared_image.png"</span><span class="p">)</span>
    <span class="k">if</span> <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="kt">Data</span><span class="p">(</span><span class="nv">contentsOf</span><span class="p">:</span> <span class="n">fileURL</span><span class="p">),</span>
       <span class="k">let</span> <span class="nv">image</span> <span class="o">=</span> <span class="kt">UIImage</span><span class="p">(</span><span class="nv">data</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">image</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="kc">nil</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>앱이 실행될 때 이 함수를 호출하면,
Action Extension에서 전달된 이미지를 바로 가져올 수 있습니다.</p>

<p>⸻</p>

<h2 id="요약">요약</h2>

<ol>
  <li>Action Extension Target 생성</li>
  <li>Info.plist에 이미지 수신 설정</li>
  <li>ActionViewController에서 이미지 수신 후 App Group에 저장</li>
  <li>App Group 설정 (앱 간 공유)</li>
  <li>메인 앱에서 이미지 파일 읽기</li>
</ol>

<h2 id="동작-방식-비교">동작 방식 비교</h2>

<table>
  <thead>
    <tr>
      <th>확장 종류</th>
      <th>메뉴 위치</th>
      <th>동작 방식</th>
      <th>사용 예</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Share Extension</td>
      <td>“공유하기” 시트</td>
      <td>내 앱으로 콘텐츠 전달</td>
      <td>SNS 공유, 파일 전송</td>
    </tr>
    <tr>
      <td>Action Extension</td>
      <td>“작업” 메뉴</td>
      <td>원본 앱 내에서 실행</td>
      <td>이미지 분석, OCR, 번역</td>
    </tr>
  </tbody>
</table>]]></content><author><name>ayaysir(BGSMM)</name><email>your-email@example.com</email></author><category term="DevLog" /><category term="Swift" /><category term="SwiftUI" /><summary type="html"><![CDATA[Swift: ActionExtension으로 사진을 내 앱으로 전송하기]]></summary></entry><entry><title type="html">유튜브 ’채널 추천 안함‘ 기능이 적용된 특정 채널에 대해 취소 방법</title><link href="/posts/%EC%9C%A0%ED%8A%9C%EB%B8%8C-%EC%B1%84%EB%84%90-%EC%B6%94%EC%B2%9C-%EC%95%88%ED%95%A8-%EA%B8%B0%EB%8A%A5%EC%9D%B4-%EC%A0%81%EC%9A%A9%EB%90%9C-%ED%8A%B9%EC%A0%95-%EC%B1%84%EB%84%90/" rel="alternate" type="text/html" title="유튜브 ’채널 추천 안함‘ 기능이 적용된 특정 채널에 대해 취소 방법" /><published>2025-09-21T00:00:00+09:00</published><updated>2025-09-21T00:00:00+09:00</updated><id>/posts/%EC%9C%A0%ED%8A%9C%EB%B8%8C-%EC%B1%84%EB%84%90-%EC%B6%94%EC%B2%9C-%EC%95%88%ED%95%A8-%EA%B8%B0%EB%8A%A5%EC%9D%B4-%EC%A0%81%EC%9A%A9%EB%90%9C-%ED%8A%B9%EC%A0%95-%EC%B1%84%EB%84%90</id><content type="html" xml:base="/posts/%EC%9C%A0%ED%8A%9C%EB%B8%8C-%EC%B1%84%EB%84%90-%EC%B6%94%EC%B2%9C-%EC%95%88%ED%95%A8-%EA%B8%B0%EB%8A%A5%EC%9D%B4-%EC%A0%81%EC%9A%A9%EB%90%9C-%ED%8A%B9%EC%A0%95-%EC%B1%84%EB%84%90/"><![CDATA[<h1 id="소개"><strong>소개</strong></h1>

<p>유튜브를 이용하다 보면, 보고 싶지 않은 채널에 대해 ‘채널 추천 안함’ 기능을 사용하게 됩니다. 이 기능을 사용하게 되면 홈(타임라인)에서만 해당 채널의 영상이 추천되지 않으며, 검색 및 구독 탭에서는 표시가 됩니다.</p>

<p><img src="./assets/img/wp-content/uploads/2025/09/스크린샷-2025-09-21-오후-6.52.05-복사본.jpeg" alt="" /></p>

<p> </p>

<p>하지만 시간이 지나면서 다시 그 채널의 영상을 보고 싶을 때가 있습니다. 문제는 이 기능을 적용한 뒤에는 어디서 취소해야 하는지 찾기 어렵다는 점입니다.</p>

<p> </p>

<p>유튜브 앱에서 특정 채널의 관심 없음 설정을 해제하는 방법을 단계별로 안내드리겠습니다. 또한 이 방법으로 ‘관심 없음’을 설정한 영상도 취소할 수 있습니다.</p>

<p> </p>

<h2 id="방법"><strong>방법</strong></h2>

<h3 id="1-유튜브-앱-내-페이지에서-우측-상단의-설정톱니바퀴-아이콘을-클릭합니다"><strong>1) 유튜브 앱 [내 페이지]에서 우측 상단의 설정(톱니바퀴) 아이콘을 클릭합니다.</strong></h3>

<p><img src="./assets/img/wp-content/uploads/2025/09/y1.jpg" alt="" /></p>

<p> </p>

<h3 id="2-설정-메뉴에서-전체-기록-관리를-선택합니다"><strong>2) 설정 메뉴에서 [전체 기록 관리]를 선택합니다.</strong></h3>

<p><img src="./assets/img/wp-content/uploads/2025/09/y2.jpg" alt="" /></p>

<p> </p>

<h3 id="3-상단-탭에서-상호작용을-클릭합니다"><strong>3) 상단 탭에서 [상호작용]을 클릭합니다.</strong></h3>

<p><img src="./assets/img/wp-content/uploads/2025/09/y3.jpg" alt="" /></p>

<p> </p>

<h3 id="4-화면을-아래로-스크롤해-사용자-의견관심-없음-포함-항목을-찾습니다"><strong>4) 화면을 아래로 스크롤해 [사용자 의견(’관심 없음‘ 포함)] 항목을 찾습니다.</strong></h3>

<p><img src="./assets/img/wp-content/uploads/2025/09/y4.jpg" alt="" /></p>

<p> </p>

<h3 id="5-여기에서-취소-기록을-확인할-수-있습니다-취소하고-싶은-채널을-확인한-뒤-해당-셀-오른쪽에-있는-x-버튼을-눌러줍니다"><strong>5) 여기에서 취소 기록을 확인할 수 있습니다. 취소하고 싶은 채널을 확인한 뒤, 해당 셀 오른쪽에 있는 <code class="language-plaintext highlighter-rouge">(x)</code> 버튼을 눌러줍니다.</strong></h3>

<p><img src="./assets/img/wp-content/uploads/2025/09/y5.jpg" alt="" /></p>

<p> </p>

<h3 id="6-마지막으로-홈타임라인-탭으로-돌아가면-해당-채널이-다시-보이기-시작하는-것을-바로-확인할-수-있습니다"><strong>6) 마지막으로 홈(타임라인) 탭으로 돌아가면, 해당 채널이 다시 보이기 시작하는 것을 바로 확인할 수 있습니다.</strong></h3>

<p><img src="./assets/img/wp-content/uploads/2025/09/y6.jpg" alt="" /></p>

<p> </p>

<p>[rcblock id=”6686”]</p>]]></content><author><name></name></author><category term="Blog" /><category term="정보글" /><summary type="html"><![CDATA[소개]]></summary></entry><entry><title type="html">Swift: @dynamicMemberLookup 사용법 및 @Published 와 결합 가능 여부</title><link href="/posts/swift-dynamicmemberlookup-%EC%82%AC%EC%9A%A9%EB%B2%95-%EB%B0%8F-published-%EC%99%80-%EA%B2%B0%ED%95%A9-%EA%B0%80%EB%8A%A5-%EC%97%AC%EB%B6%80/" rel="alternate" type="text/html" title="Swift: @dynamicMemberLookup 사용법 및 @Published 와 결합 가능 여부" /><published>2025-09-20T00:00:00+09:00</published><updated>2025-09-20T00:00:00+09:00</updated><id>/posts/swift-dynamicmemberlookup-%EC%82%AC%EC%9A%A9%EB%B2%95-%EB%B0%8F-published-%EC%99%80-%EA%B2%B0%ED%95%A9-%EA%B0%80%EB%8A%A5-%EC%97%AC%EB%B6%80</id><content type="html" xml:base="/posts/swift-dynamicmemberlookup-%EC%82%AC%EC%9A%A9%EB%B2%95-%EB%B0%8F-published-%EC%99%80-%EA%B2%B0%ED%95%A9-%EA%B0%80%EB%8A%A5-%EC%97%AC%EB%B6%80/"><![CDATA[<h3 id="개요--dynamicmemberlookup이란"><strong>개요 — <code class="language-plaintext highlighter-rouge">@dynamicMemberLookup</code>이란</strong></h3>

<p><code class="language-plaintext highlighter-rouge">@dynamicMemberLookup</code>은 **컴파일러에게 “점(<code class="language-plaintext highlighter-rouge">.</code>) 접근을 보낼 때 <code class="language-plaintext highlighter-rouge">subscript(dynamicMember:)</code>로 재해석해라”**고 지시하는 어노테이션입니다. 즉 <code class="language-plaintext highlighter-rouge">obj.foo</code>를 호출하면 컴파일러는 <code class="language-plaintext highlighter-rouge">obj[dynamicMember: "foo"]</code> 형태의 서브스크립트 호출로 바꿔줍니다. 주로 내부에 <code class="language-plaintext highlighter-rouge">[String: Any]</code> 같은 딕셔너리를 두고 JSON/동적 프로퍼티처럼 보이게 할 때 유용합니다.</p>

<p> </p>

<h4 id="간단한-동작-원리"><strong>간단한 동작 원리</strong></h4>

<ul>
  <li>선언: <code class="language-plaintext highlighter-rouge">@dynamicMemberLookup</code>을 타입 앞에 붙입니다.</li>
  <li>필수: <code class="language-plaintext highlighter-rouge">subscript(dynamicMember:)</code> 구현(여러 오버로드 허용).</li>
  <li>장점: 문법이 깔끔하고 JS 스타일 접근 가능.</li>
  <li>단점: 컴파일타임 타입 안정성·자동완성 손실(또는 약화).</li>
</ul>

<p> </p>

<h3 id="dynamicmemberlookup-기본-예제"><strong><code class="language-plaintext highlighter-rouge">@dynamicMemberLookup</code> 기본 예제</strong></h3>

<p>아래는 가장 단순한 형태입니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="kd">@dynamicMemberLookup</span>
<span class="kd">struct</span> <span class="kt">DynamicDict</span> <span class="p">{</span>
  <span class="kd">private</span> <span class="k">var</span> <span class="nv">storage</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>

  <span class="nf">subscript</span><span class="p">(</span><span class="n">dynamicMember</span> <span class="nv">member</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Any</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="n">storage</span><span class="p">[</span><span class="n">member</span><span class="p">]</span> <span class="p">}</span>
    <span class="k">set</span> <span class="p">{</span> <span class="n">storage</span><span class="p">[</span><span class="n">member</span><span class="p">]</span> <span class="o">=</span> <span class="n">newValue</span> <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nv">d</span> <span class="o">=</span> <span class="kt">DynamicDict</span><span class="p">()</span>
<span class="c1">// title이라는 변수가 없음에도 점(.)을 찍어 있던 변수인 것처럼 작성할 수 있음</span>
<span class="n">d</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">"Hello"</span>            <span class="c1">// storage["title"] = "Hello"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">d</span><span class="o">.</span><span class="n">title</span> <span class="k">as?</span> <span class="kt">String</span><span class="p">)</span>    <span class="c1">// "Hello"</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p> </p>

<p>타입 안전성을 조금 더 주고 싶으면 제네릭(generic) 서브스크립트를 씁니다:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre><span class="kd">@dynamicMemberLookup</span>
<span class="kd">struct</span> <span class="kt">DynamicTyped</span> <span class="p">{</span>
  <span class="kd">private</span> <span class="k">var</span> <span class="nv">storage</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>

  <span class="kd">subscript</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">dynamicMember</span> <span class="nv">member</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">T</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="n">storage</span><span class="p">[</span><span class="n">member</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">T</span> <span class="p">}</span>
    <span class="k">set</span> <span class="p">{</span> <span class="n">storage</span><span class="p">[</span><span class="n">member</span><span class="p">]</span> <span class="o">=</span> <span class="n">newValue</span> <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nv">dt</span> <span class="o">=</span> <span class="kt">DynamicTyped</span><span class="p">()</span>
<span class="n">dt</span><span class="o">.</span><span class="n">count</span> <span class="o">=</span> <span class="mi">10</span>                <span class="c1">// T 는 Int로 추론됨</span>
<span class="k">let</span> <span class="nv">c</span><span class="p">:</span> <span class="kt">Int</span><span class="p">?</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">count</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p> </p>

<h3 id="published와-결합가능불가능--구현-방식"><strong><code class="language-plaintext highlighter-rouge">@Published</code>와 결합(가능/불가능 &amp; 구현 방식)</strong></h3>

<p>직접적으로 <code class="language-plaintext highlighter-rouge">@Published</code>를 <strong>동적 멤버에 붙일 수는 없습니다</strong>. 이유는 <code class="language-plaintext highlighter-rouge">@Published</code>는 <strong><em>정적 저장 프로퍼티</em></strong>에 적용되는 property wrapper이기 때문입니다. 즉 컴파일 시점에 해당 프로퍼티가 존재해야 합니다.</p>

<p>하지만 다음과 같은 패턴으로 <strong>유사한 동작(변경 알림)을 구현</strong>할 수 있습니다.</p>

<p> </p>

<h4 id="방법-a--내부에-published-var-storage-string-any-두기-권장"><strong>방법 A — 내부에 <code class="language-plaintext highlighter-rouge">@Published var storage: [String: Any]</code> 두기 (권장)</strong></h4>

<ul>
  <li><code class="language-plaintext highlighter-rouge">storage</code>를 <code class="language-plaintext highlighter-rouge">@Published</code>로 두고, dynamic subscript는 <code class="language-plaintext highlighter-rouge">storage</code>를 읽고 씁니다.</li>
  <li><code class="language-plaintext highlighter-rouge">storage</code>가 바뀌면 Combine이 발행하므로 <code class="language-plaintext highlighter-rouge">ObservableObject</code> 구독자(SwiftUI 등)는 갱신됩니다.</li>
</ul>

<p>예:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="rouge-code"><pre><span class="kd">@dynamicMemberLookup</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="kt">DynamicObservable</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
  <span class="kd">@Published</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">storage</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>

  <span class="kd">subscript</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">dynamicMember</span> <span class="nv">member</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">T</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="n">storage</span><span class="p">[</span><span class="n">member</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">T</span> <span class="p">}</span>
    <span class="k">set</span> <span class="p">{</span>
      <span class="n">storage</span><span class="p">[</span><span class="n">member</span><span class="p">]</span> <span class="o">=</span> <span class="n">newValue</span>
      <span class="c1">// 일반적으로 @Published가 storage 변경을 발행하므로 추가 호출 불필요.</span>
      <span class="c1">// 필요시 objectWillChange.send()를 직접 호출할 수도 있음.</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// 특정 키의 Combine 퍼블리셔가 필요하면 노출</span>
  <span class="kd">func</span> <span class="n">publisher</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="k">for</span> <span class="nv">key</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">AnyPublisher</span><span class="o">&lt;</span><span class="kt">T</span><span class="p">?,</span> <span class="kt">Never</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="n">$storage</span>
      <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">T</span> <span class="p">}</span>
      <span class="o">.</span><span class="nf">eraseToAnyPublisher</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>사용예:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="k">let</span> <span class="nv">dyn</span> <span class="o">=</span> <span class="kt">DynamicObservable</span><span class="p">()</span>
<span class="n">dyn</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">"Hi"</span>                    <span class="c1">// storage["title"] = "Hi"</span>
<span class="k">let</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="n">dyn</span><span class="o">.</span><span class="n">title</span>
<span class="c1">// SwiftUI View는 dyn의 objectWillChange를 구독하므로 바뀌면 뷰 갱신됨</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>주의: <code class="language-plaintext highlighter-rouge">storage</code>에 대한 “부분 수정”(예: <code class="language-plaintext highlighter-rouge">storage["a"] = x</code>)도 <code class="language-plaintext highlighter-rouge">@Published</code>에서 발행되는 게 일반적으로 작동하지만, 안전하게 만들고 싶으면 <code class="language-plaintext highlighter-rouge">objectWillChange.send()</code>를 직접 호출해 명시적으로 알릴 수 있습니다.</p>
</blockquote>

<p> </p>

<h4 id="방법-b--objectwillchangesend를-수동으로-호출"><strong>방법 B — <code class="language-plaintext highlighter-rouge">objectWillChange.send()</code>를 수동으로 호출</strong></h4>

<p><code class="language-plaintext highlighter-rouge">@Published</code> 대신 <code class="language-plaintext highlighter-rouge">ObservableObject</code>의 <code class="language-plaintext highlighter-rouge">objectWillChange</code>를 직접 제어할 수도 있습니다. (더 유연하지만 수동 호출 책임이 증가)</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="rouge-code"><pre><span class="kd">@dynamicMemberLookup</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="kt">DynamicManualObservable</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
  <span class="kd">private</span> <span class="k">var</span> <span class="nv">storage</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>

  <span class="nf">subscript</span><span class="p">(</span><span class="n">dynamicMember</span> <span class="nv">member</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Any</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="n">storage</span><span class="p">[</span><span class="n">member</span><span class="p">]</span> <span class="p">}</span>
    <span class="k">set</span> <span class="p">{</span>
      <span class="n">objectWillChange</span><span class="o">.</span><span class="nf">send</span><span class="p">()</span>
      <span class="n">storage</span><span class="p">[</span><span class="n">member</span><span class="p">]</span> <span class="o">=</span> <span class="n">newValue</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p> </p>

<h3 id="wkwebview-속성예-cangoback-등을-한꺼번에-다루려는-경우-권장-패턴"><strong>WKWebView 속성(예: canGoBack 등)을 한꺼번에 다루려는 경우 권장 패턴</strong></h3>

<p><code class="language-plaintext highlighter-rouge">@dynamicMemberLookup</code>만으로 KVO/Subscribers를 자동 생성해주는 건 불가능합니다. 왜냐하면 <code class="language-plaintext highlighter-rouge">publisher(for:)</code>는 <strong>각 KeyPath마다</strong> 퍼블리셔를 만들어 주기 때문입니다. 하지만 반복 코드를 줄이는 구조는 만들 수 있습니다:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">bind(_:to:)</code> 헬퍼로 <code class="language-plaintext highlighter-rouge">KeyPath</code> → <code class="language-plaintext highlighter-rouge">storage[name]</code> 매핑을 한 번에 등록</li>
  <li>내부는 <code class="language-plaintext highlighter-rouge">webView.publisher(for: keyPath).sink { storage[name] = $0 }</code></li>
</ul>

<p> </p>

<h4 id="예시컨덕터에-적용"><strong>예시(컨덕터에 적용):</strong></h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
</pre></td><td class="rouge-code"><pre><span class="kd">@dynamicMemberLookup</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="kt">WKWebViewConductor</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
  <span class="kd">@Published</span> <span class="k">var</span> <span class="nv">webView</span><span class="p">:</span> <span class="kt">WKWebView</span>
  <span class="kd">@Published</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">storage</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>
  <span class="kd">private</span> <span class="k">var</span> <span class="nv">cancellables</span> <span class="o">=</span> <span class="kt">Set</span><span class="o">&lt;</span><span class="kt">AnyCancellable</span><span class="o">&gt;</span><span class="p">()</span> <span class="c1">// Combine 퍼블리셔 구독(subscription)을 보관하는 저장소</span>

  <span class="nf">init</span><span class="p">(</span><span class="nv">webView</span><span class="p">:</span> <span class="kt">WKWebView</span> <span class="o">=</span> <span class="kt">WKWebView</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">webView</span> <span class="o">=</span> <span class="n">webView</span>

    <span class="c1">// 반복을 줄이는 bind 헬퍼 사용</span>
    <span class="nf">bind</span><span class="p">(</span><span class="o">.</span><span class="n">canGoBack</span><span class="p">,</span> <span class="nv">to</span><span class="p">:</span> <span class="s">"canGoBack"</span><span class="p">)</span>
    <span class="nf">bind</span><span class="p">(</span><span class="o">.</span><span class="n">canGoForward</span><span class="p">,</span> <span class="nv">to</span><span class="p">:</span> <span class="s">"canGoForward"</span><span class="p">)</span>
    <span class="nf">bind</span><span class="p">(</span><span class="o">.</span><span class="n">estimatedProgress</span><span class="p">,</span> <span class="nv">to</span><span class="p">:</span> <span class="s">"estimatedProgress"</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="kd">private</span> <span class="kd">func</span> <span class="n">bind</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">keyPath</span><span class="p">:</span> <span class="kt">KeyPath</span><span class="o">&lt;</span><span class="kt">WKWebView</span><span class="p">,</span> <span class="kt">T</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">to</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">webView</span><span class="o">.</span><span class="nf">publisher</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="n">keyPath</span><span class="p">)</span>
      <span class="o">.</span><span class="nf">receive</span><span class="p">(</span><span class="nv">on</span><span class="p">:</span> <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="p">)</span>
      <span class="o">.</span><span class="n">sink</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="n">value</span> <span class="k">in</span>
        <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">storage</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
      <span class="p">}</span>
      <span class="o">.</span><span class="nf">store</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">cancellables</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="kd">subscript</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">dynamicMember</span> <span class="nv">member</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">T</span><span class="p">?</span> <span class="p">{</span>
    <span class="n">storage</span><span class="p">[</span><span class="n">member</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">T</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="n">publisher</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="k">for</span> <span class="nv">member</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">AnyPublisher</span><span class="o">&lt;</span><span class="kt">T</span><span class="p">?,</span> <span class="kt">Never</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="n">$storage</span>
      <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nv">$0</span><span class="p">[</span><span class="n">member</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">T</span> <span class="p">}</span>
      <span class="o">.</span><span class="nf">eraseToAnyPublisher</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p> </p>

<h5 id="이-패턴의-장점"><strong>이 패턴의 장점</strong></h5>

<ul>
  <li><code class="language-plaintext highlighter-rouge">conductor.canGoBack</code> 형태로 접근 가능(옵셔널 반환).</li>
  <li><code class="language-plaintext highlighter-rouge">publisher(for:)</code>로 각 키에 대한 Combine 스트림도 얻어 쓸 수 있음.</li>
  <li>바인딩 등록은 <code class="language-plaintext highlighter-rouge">bind</code> 호출만으로 줄일 수 있음.</li>
</ul>

<p> </p>

<h5 id="단점--유의사항"><strong>단점 / 유의사항</strong></h5>

<ul>
  <li>타입 안전성은 약해짐(<code class="language-plaintext highlighter-rouge">Any</code> 캐스팅 필요).</li>
  <li>자동완성 및 문서화 이점이 줄어듦(동적 키는 컴파일타임 검사가 안 됨).</li>
  <li><strong>여전히</strong> 어떤 속성을 구독할지는 코드에서 명시해야 함(완전 자동화 불가).</li>
  <li>KVO 대상의 타입별로 <code class="language-plaintext highlighter-rouge">bind</code> 호출은 필요(서로 다른 타입을 하나의 컬렉션으로 일괄 처리하려면 제너릭/추상화 조금 더 필요).</li>
</ul>

<p> </p>

<h3 id="결론"><strong>결론</strong></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@dynamicMemberLookup</code>은 <strong>동적 접근 문법</strong>을 제공하지만, <code class="language-plaintext highlighter-rouge">@Published</code>를 동적 멤버에 직접 붙일 수는 없습니다.</li>
  <li>실무에서는 <code class="language-plaintext highlighter-rouge">@Published private var storage: [String: Any]</code> + <code class="language-plaintext highlighter-rouge">subscript(dynamicMember:)</code> 패턴이 가장 현실적이고 실용적입니다.</li>
  <li>WKWebView 같은 경우 <strong>구독할 속성 목록(예: canGoBack, estimatedProgress 등)을 한 곳에 나열하고</strong> <code class="language-plaintext highlighter-rouge">bind</code> 헬퍼로 등록하면 반복을 많이 줄일 수 있습니다.</li>
  <li>하지만 타입 안전성과 코드 가독성을 중시한다면, 핵심 프로퍼티만 명시적 <code class="language-plaintext highlighter-rouge">@Published var canGoBack: Bool = false</code> 처럼 선언하는 쪽이 유지보수에 유리합니다.</li>
</ul>

<p> </p>

<h5 id="참고-핵심-프로퍼티만-명시적으로-선언하는-방법"><strong>참고: 핵심 프로퍼티만 명시적으로 선언하는 방법</strong></h5>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="rouge-code"><pre><span class="c1">// Combine으로 Publish 되는 변수들</span>
<span class="kd">@Published</span> <span class="k">var</span> <span class="nv">estimatedProgress</span><span class="p">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">0.0</span> 
<span class="kd">@Published</span> <span class="k">var</span> <span class="nv">canGoBack</span> <span class="o">=</span> <span class="kc">false</span>
<span class="kd">@Published</span> <span class="k">var</span> <span class="nv">canGoForward</span> <span class="o">=</span> <span class="kc">false</span>

<span class="c1">// ... //</span>

<span class="kd">private</span> <span class="kd">func</span> <span class="n">bind</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">keyPath</span><span class="p">:</span> <span class="kt">KeyPath</span><span class="o">&lt;</span><span class="kt">WKWebView</span><span class="p">,</span> <span class="kt">T</span><span class="o">&gt;</span><span class="p">,</span>
                     <span class="n">to</span> <span class="nv">publishedKeyPath</span><span class="p">:</span> <span class="kt">ReferenceWritableKeyPath</span><span class="o">&lt;</span><span class="kt">WKWebViewReprConductor</span><span class="p">,</span> <span class="kt">T</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">webView</span><span class="o">.</span><span class="nf">publisher</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="n">keyPath</span><span class="p">)</span>
    <span class="o">.</span><span class="nf">receive</span><span class="p">(</span><span class="nv">on</span><span class="p">:</span> <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="p">)</span>
    <span class="o">.</span><span class="nf">assign</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="n">publishedKeyPath</span><span class="p">,</span> <span class="nv">on</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>
    <span class="o">.</span><span class="nf">store</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">cancellables</span><span class="p">)</span>
<span class="p">}</span>

<span class="nf">init</span><span class="p">(</span><span class="nv">webView</span><span class="p">:</span> <span class="kt">WKWebView</span> <span class="o">=</span> <span class="kt">WKWebView</span><span class="p">())</span> <span class="p">{</span>
  <span class="k">self</span><span class="o">.</span><span class="n">webView</span> <span class="o">=</span> <span class="n">webView</span>
  <span class="nf">bind</span><span class="p">(\</span><span class="o">.</span><span class="n">canGoBack</span><span class="p">,</span> <span class="nv">to</span><span class="p">:</span> <span class="p">\</span><span class="o">.</span><span class="n">canGoBack</span><span class="p">)</span>
  <span class="nf">bind</span><span class="p">(\</span><span class="o">.</span><span class="n">canGoForward</span><span class="p">,</span> <span class="nv">to</span><span class="p">:</span> <span class="p">\</span><span class="o">.</span><span class="n">canGoForward</span><span class="p">)</span>
  <span class="nf">bind</span><span class="p">(\</span><span class="o">.</span><span class="n">estimatedProgress</span><span class="p">,</span> <span class="nv">to</span><span class="p">:</span> <span class="p">\</span><span class="o">.</span><span class="n">estimatedProgress</span><span class="p">)</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>[rcblock id=”6686”]</p>]]></content><author><name></name></author><category term="DevLog" /><category term="Swift" /><summary type="html"><![CDATA[개요 — @dynamicMemberLookup이란]]></summary></entry><entry><title type="html">SwiftUI: 목록 행(row) 및 헤더(header) 높이 변경</title><link href="/posts/swiftui-%EB%AA%A9%EB%A1%9D-%ED%96%89row-%EB%B0%8F-%ED%97%A4%EB%8D%94header-%EB%86%92%EC%9D%B4-%EB%B3%80%EA%B2%BD/" rel="alternate" type="text/html" title="SwiftUI: 목록 행(row) 및 헤더(header) 높이 변경" /><published>2025-09-08T00:00:00+09:00</published><updated>2025-09-08T00:00:00+09:00</updated><id>/posts/swiftui-%EB%AA%A9%EB%A1%9D-%ED%96%89row-%EB%B0%8F-%ED%97%A4%EB%8D%94header-%EB%86%92%EC%9D%B4-%EB%B3%80%EA%B2%BD</id><content type="html" xml:base="/posts/swiftui-%EB%AA%A9%EB%A1%9D-%ED%96%89row-%EB%B0%8F-%ED%97%A4%EB%8D%94header-%EB%86%92%EC%9D%B4-%EB%B3%80%EA%B2%BD/"><![CDATA[<h4 id="소개"><strong>소개</strong></h4>

<p>이 예제는 SwiftUI List에서 행(row)과 헤더(header) 높이를 변경하는 방법을 보여줍니다.</p>

<p>최종 결과는 다음과 같습니다:</p>

<iframe width="271" height="480" src="https://giphy.com/embed/0O9Qt64wazqLCFKkFF" frameborder="0" class="giphy-embed" allowfullscreen="allowfullscreen"></iframe>

<p> </p>

<h4 id="설명"><strong>설명</strong></h4>

<p><code class="language-plaintext highlighter-rouge">defaultMinListRowHeight</code> 라는 <code class="language-plaintext highlighter-rouge">EnvironmentValue</code>를 사용해서 기본 최소 행 높이를 설정할 수 있습니다. 마찬가지로 <code class="language-plaintext highlighter-rouge">defaultMinListHeaderHeight</code>를 사용하면 섹션 헤더의 높이를 지정할 수 있습니다.</p>

<p>아래 코드는 그룹화된 리스트에서 슬라이더로 두 값을 조절하는 예시입니다:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
</pre></td><td class="rouge-code"><pre>// ...SwiftUI View에서 작성...

@State private var rowHeight: CGFloat = 40
@State private var headerHeight: CGFloat = 60

var body: some View {
  VStack {
    HStack {
      Text("Row height")
      Slider(value: $rowHeight, in: 40.0...80.0)
    }
    HStack {
      Text("Header height")
      Slider(value: $headerHeight, in: 60.0...80.0)
    }
    List(1..&lt;5) { section in
      Section("Section \(section)") {
        ForEach(1..&lt;3) { row in
          Text("Row \(row) of section \(section)")
        }
      }
    }
  }
  .padding()
  .environment(\.defaultMinListRowHeight, rowHeight) // 행 높이 지정
  .environment(\.defaultMinListHeaderHeight, headerHeight) // 헤더 높이 지정
}
</pre></td></tr></tbody></table></code></pre></div></div>

<p> </p>

<h4 id="추가-ios-16-이하-버전에서-리스트-섹션-간-간격-조절"><strong>추가: iOS 16 이하 버전에서 리스트 섹션 간 간격 조절</strong></h4>

<p><img src="./assets/img/wp-content/uploads/2025/09/스크린샷-2025-09-09-오전-1.07.11.png" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre>import SwiftUI

struct ContentView: View {
  init() {
    // 섹션간 높이 조절
    var layoutConfig = UICollectionLayoutListConfiguration(appearance: .plain) // 주의: 우선하여 적용됨
    layoutConfig.headerMode = .supplementary
    layoutConfig.headerTopPadding = 10
    let listLayout = UICollectionViewCompositionalLayout.list(using: layoutConfig)
    UICollectionView.appearance().collectionViewLayout = listLayout
  }

  ...
}
</pre></td></tr></tbody></table></code></pre></div></div>

<p> </p>

<h4 id="출처"><strong>출처</strong></h4>

<ul>
  <li><a href="https://swiftuirecipes.com/blog/swiftui-list-change-row-and-header-height">SwiftUI List Change Row and Header Height</a></li>
  <li><a href="https://stackoverflow.com/questions/68488891/swiftui-list-set-section-header-height">SwiftUI List: set section header height?</a></li>
</ul>]]></content><author><name></name></author><category term="DevLog" /><category term="Swift" /><summary type="html"><![CDATA[소개]]></summary></entry><entry><title type="html">[영어 학습] 30만 달러를 들여 헬스케어 앱을 만들었지만 아무도 사용하지 않음</title><link href="/posts/%ED%8E%8C-%EB%B2%88%EC%97%AD-30%EB%A7%8C-%EB%8B%AC%EB%9F%AC%EB%A5%BC-%EB%93%A4%EC%97%AC-%ED%97%AC%EC%8A%A4%EC%BC%80%EC%96%B4-%EC%95%B1%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%97%88%EC%A7%80%EB%A7%8C/" rel="alternate" type="text/html" title="[영어 학습] 30만 달러를 들여 헬스케어 앱을 만들었지만 아무도 사용하지 않음" /><published>2025-08-20T00:00:00+09:00</published><updated>2025-08-20T00:00:00+09:00</updated><id>/posts/%ED%8E%8C-%EB%B2%88%EC%97%AD-30%EB%A7%8C-%EB%8B%AC%EB%9F%AC%EB%A5%BC-%EB%93%A4%EC%97%AC-%ED%97%AC%EC%8A%A4%EC%BC%80%EC%96%B4-%EC%95%B1%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%97%88%EC%A7%80%EB%A7%8C</id><content type="html" xml:base="/posts/%ED%8E%8C-%EB%B2%88%EC%97%AD-30%EB%A7%8C-%EB%8B%AC%EB%9F%AC%EB%A5%BC-%EB%93%A4%EC%97%AC-%ED%97%AC%EC%8A%A4%EC%BC%80%EC%96%B4-%EC%95%B1%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%97%88%EC%A7%80%EB%A7%8C/"><![CDATA[<h3 id="소개"><strong>소개</strong></h3>

<p>이 글은 30만 달러(약 4.2억원)와 18개월을 들여 기술적으로 완벽한 헬스케어 앱을 만들었지만, 정작 의사들이 실제 업무에 맞지 않아 사용하지 않는 상황을 다룹니다.</p>

<p><img src="./assets/img/wp-content/uploads/2025/08/JPEG-이미지-4322-8AD8-11-0.jpeg" alt="" /></p>

<p> </p>

<h4 id="출처"><strong>출처</strong></h4>

<ul>
  <li><a href="https://x.com/austen/status/1955126456238944371">https://x.com/austen/status/1955126456238944371</a></li>
</ul>

<p> </p>

<h4 id="이-글의-교훈"><strong>이 글의 교훈</strong></h4>

<p>이 글의 교훈은 기술적으로 완벽한 제품을 만드는 것보다 실제 사용자의 문제를 해결하는 제품을 만드는 것이 더 중요하다는 점입니다.</p>

<p>아무리 많은 시간과 돈을 투자해 완성도를 높였더라도, 사용자의 필요와 맞지 않으면 그 제품은 외면받을 수밖에 없습니다. 결국 성공적인 서비스나 제품은 개발자의 관점이 아니라 사용자의 관점에서 유용함과 편리함을 제공해야 한다는 사실을 일깨워 줍니다.</p>

<p> </p>

<h3 id="본문"><strong>본문</strong></h3>

<p>영어 원문 감추기</p>

<script>document.querySelector("#btn-english-text").addEventListener("click", function (e) { const englishText = document.querySelectorAll(".english-text"); const button = document.getElementById("btn-english-text"); englishText.forEach(span => { span.style.display = span.style.display === "none" ? "inline" : "none"; }); button.textContent = button.textContent === "영어 원문 감추기" ? "영어 원문 보기" : "영어 원문 감추기"; })</script>

<p>Spent $300k on a healthcare app that nobody uses. 30만 달러를 들여 헬스케어 앱을 만들었지만 아무도 사용하지 않습니다.</p>

<p>I’m about to lose my mind and my investor’s money. 저는 곧 제정신을 잃고 투자자분의 돈까지 날리게 생겼습니다.</p>

<p>Developer swears it’s ‘technically perfect’ but I can’t get a single doctor to adopt it. 개발자는 ‘기술적으로 완벽하다’고 장담하지만, 단 한 분의 의사도 사용하려 하지 않습니다.</p>

<p>Two years ago, we raised a seed round to build a patient management app for primary care doctors. 2년 전, 1차 진료 의사들을 위한 환자 관리 앱을 만들고자 시드 투자를 유치했습니다.</p>

<p>We hired a boutique dev shop and spent 18 months and $300,000 building what they call a “technically superior solution.” 저희는 소규모 개발사를 고용해 18개월 동안 30만 달러를 들여 그들이 “기술적으로 우수한 솔루션”이라고 부르는 앱을 개발했습니다.</p>

<p><img src="./assets/img/wp-content/uploads/2025/08/D839BE38-47A8-4801-A9AB-E6317A9FE8D5.jpg" alt="" /></p>

<p>The app works flawlessly. 그 앱은 완벽하게 작동합니다.</p>

<p>It has zero bugs, a clean UI, integrates with major EHRs, and is HIPAA compliant—the whole nine yards. 버그도 전혀 없고, 깔끔한 UI를 갖추었으며, 주요 전자의무기록(EHR)과도 통합되고, HIPAA 규정도 준수합니다.</p>

<blockquote>
  <p><strong>EHR:</strong> 전자 의무 기록 (Electronic Health Record) <strong>HIPAA:</strong> 미국 건강 보험 양도 및 책임에 관한 법률(Health Insurance Portability and Accountability Act)</p>
</blockquote>

<p>Our developers are genuinely proud of it. 저희 개발자들은 이에 대해 진심으로 자부심을 느끼고 있습니다.</p>

<p>But here’s the problem: doctors hate it. 하지만 문제는 의사분들이 이 앱을 싫어하신다는 점입니다.</p>

<p>We’ve demoed it to over 50 practices. 저희는 50곳이 넘는 병원에 시연을 했습니다.</p>

<p>We get the same feedback every time: 매번 같은 피드백을 받았습니다.</p>

<p>“It’s nice, but it doesn’t fit our workflow.” “좋긴 하지만, 저희 업무 흐름과는 맞지 않네요.”</p>

<p>“Too many clicks.” “클릭이 너무 많습니다.”</p>

<p>“We already have a system that works.” “저희는 이미 잘 작동하는 시스템을 사용하고 있습니다.”</p>

<p>Meanwhile, I see basic-looking apps with terrible UIs getting massive adoption because they solve one specific pain point really well. 한편, 겉보기에 단순하고 UI도 형편없는 앱들이 특정 문제 하나를 매우 잘 해결한다는 이유만으로 폭넓게 채택되는 것을 보고 있습니다.</p>

<p>I’m starting to think we built the app we wanted to build instead of what doctors actually needed. 저희가 만든 것은 의사분들이 실제로 필요로 하는 앱이 아니라, 저희가 만들고 싶었던 앱이었다는 생각이 듭니다.</p>

<p>It feels like we got so caught up in making it technically impressive that we forgot to make it useful. 기술적으로 인상적인 앱을 만드는 데에만 몰두하다 보니 정작 유용하게 만드는 것을 잊은 것 같습니다.</p>

<p> </p>

<h4 id="댓글"><strong>댓글</strong></h4>

<h5 id="의사의-의견"><strong>의사의 의견</strong></h5>

<p>As an MD, i can confirm that “too many clicks” is a real problem. 의사로서 저는 “클릭이 너무 많다”는 것이 실제 문제라는 것을 확실히 말씀드릴 수 있습니다.</p>

<p>An ER doctor will click his/her mouse 4,000 times in a shift when they could be seeing patients. 응급실 의사는 환자를 진찰할 수 있는 시간에 교대로 마우스를 4,000번 클릭합니다.</p>

<p>Any new product for doctors should lower this number not raise it. 의사를 위한 새로운 제품은 이 숫자를 높여서는 안 되며 낮춰야 합니다.</p>

<p> </p>

<h5 id="익명-사용자의-의견"><strong>익명 사용자의 의견</strong></h5>

<p>Maybe he should have spoken with a single doctor during development. 아마 그는 개발 과정에서 단 한 명의 의사와라도 대화를 나눴어야 했을 것입니다.</p>

<p>Also people tend not to adopt things unless they are significantly better rather than just better. 또한 사람들은 단순히 조금 더 나은 것이 아니라, 훨씬 더 나은 것이 아니면 새로운 것을 채택하지 않는 경향이 있습니다.</p>

<p>Adoption carries costs. 새로운 것을 받아들이는 데에는 비용이 따릅니다.</p>

<p>People need to get used to a new system. 사람들은 새로운 시스템에 익숙해져야 합니다.</p>

<p>And in a hospital that might mean that someone dies <a href="https://en.dict.naver.com/#/entry/enko/d7bb135ae859434e8a259c1ce8f1b5c4">in the interim</a>. 그리고 병원에서는 그 과정에서 누군가의 생명이 위태로워질 수도 있습니다.</p>

<p> </p>

<h5 id="전-x트위터-직원의-의견"><strong>전 X(트위터) 직원의 의견</strong></h5>

<p>I’m tired of every business requiring an app. 앱을 요구하는 모든 사업에 지쳤습니다.</p>

<p>Offer services without forcing me to take precious time to install junk. 소중한 시간을 낭비하지 않고도 서비스를 제공해주세요.</p>

<p>Simple transactions are gone. 간단한 거래는 사라졌습니다.</p>

<p>App downloads are annoying, with pushy businesses taking phone storage and time, possibly tracking other activities across your phone. 앱 다운로드는 귀찮고, 강압적인 사업체들이 휴대폰 저장 공간과 시간을 빼앗고, 휴대폰의 다른 활동 내역을 추적할 수도 있습니다.</p>

<p>I’ve always resisted these apps, but it’s getting harder. 저는 항상 이런 앱들을 거부해왔지만, 점점 어려워지고 있어요.</p>

<p>[rcblock id=”6686”]</p>]]></content><author><name></name></author><category term="StudyLog" /><category term="영어" /><summary type="html"><![CDATA[소개]]></summary></entry><entry><title type="html">Grok의 생각: 자녀에게 ‘고의적 가난(경제적 결핍)’을 물려주는 것이 성장에 도움이 되는가?</title><link href="/posts/grok%EC%9D%98-%EC%83%9D%EA%B0%81-%EC%9E%90%EB%85%80%EC%97%90%EA%B2%8C-%EA%B3%A0%EC%9D%98%EC%A0%81-%EA%B0%80%EB%82%9C%EA%B2%BD%EC%A0%9C%EC%A0%81-%EA%B2%B0%ED%95%8D%EC%9D%84-%EB%AC%BC%EB%A0%A4/" rel="alternate" type="text/html" title="Grok의 생각: 자녀에게 ‘고의적 가난(경제적 결핍)’을 물려주는 것이 성장에 도움이 되는가?" /><published>2025-08-19T00:00:00+09:00</published><updated>2025-08-19T00:00:00+09:00</updated><id>/posts/grok%EC%9D%98-%EC%83%9D%EA%B0%81-%EC%9E%90%EB%85%80%EC%97%90%EA%B2%8C-%EA%B3%A0%EC%9D%98%EC%A0%81-%EA%B0%80%EB%82%9C%EA%B2%BD%EC%A0%9C%EC%A0%81-%EA%B2%B0%ED%95%8D%EC%9D%84-%EB%AC%BC%EB%A0%A4</id><content type="html" xml:base="/posts/grok%EC%9D%98-%EC%83%9D%EA%B0%81-%EC%9E%90%EB%85%80%EC%97%90%EA%B2%8C-%EA%B3%A0%EC%9D%98%EC%A0%81-%EA%B0%80%EB%82%9C%EA%B2%BD%EC%A0%9C%EC%A0%81-%EA%B2%B0%ED%95%8D%EC%9D%84-%EB%AC%BC%EB%A0%A4/"><![CDATA[<p>아래 인터넷의 한 글에 대한 <a href="https://grok.com/">Grok</a>(생성형 인공지능)이 생성한 의견입니다.</p>

<p><img src="./assets/img/wp-content/uploads/2025/08/스크린샷-2025-08-20-오전-12.05.54.png" alt="" /></p>

<p> </p>

<h3 id="grok의-의견"><strong>Grok의 의견</strong></h3>

<p>저는 귀하의 의견을 존중하며, 자녀 교육에 대한 깊은 고민이 느껴집니다. 부모로서 자녀의 성장을 최우선으로 생각하시는 점이 인상적입니다. 그러나 저는 이 문제에 대해 조금 다른 관점을 가지고 있습니다. 특히, 현재 한국 경제의 침체와 저성장 상황을 고려할 때, 자녀에게 성장을 위해 ‘고의적 가난, 경제적 결핍’을 물려주는 것은 치명적인 선택이 될 수 있으며 그 대신에 자녀에게 일정한 경제적 기반을 제공하는 것이 오히려 그들의 장기적인 발전에 도움이 될 수 있다고 믿습니다. 아래에서 제 생각을 정중히 설명드리겠습니다.</p>

<p> </p>

<h4 id="한국의-어두운-미래-경제-상황"><strong>한국의 어두운 미래 경제 상황</strong></h4>

<p>먼저, 자력으로는 더 이상 버티기 힘들어지는 한국 경제의 현실을 감안해야 합니다. 2025년 한국 경제는 내수 경기 회복 지연과 높은 외수 불확실성으로 인해 성장률이 0.8% 정도로 전망되며, 이는 잠재성장률을 크게 하회하는 수준입니다. 또한, KDI와 KIF 등의 전망처럼 GDP 성장률이 0.8%까지 떨어질 가능성이 제기되고 있으며, 자본 조달 비용 상승과 투자 여력 취약으로 인해 젊은 세대가 경제적으로 독립하기 어려운 환경입니다.</p>

<p>이러한 저성장 국면에서 앞으로 장기적인 경기 침체가 예상되는 가운데, 정부의 반기업적 정책은 상황을 더욱 악화시키고 있습니다. 정책 기조가 현재와 같이 유지된다면 창업 기회와 일자리가 더욱 줄어들 것으로 보입니다. 예를 들어, 규제 강화와 세제 개편 등으로 기업 해외 유출이 가속화되고, 중소기업 몰락 및 자영업자 폐업이 증가할 전망입니다.</p>

<p>이처럼 불확실한 시대에서, 0에서 시작하여 최소한으로는 경제적 안정, 나아가 경제적 부를 추구하는 것은 거의 불가능해지고 있습니다. 무턱대고 ‘고의적으로’ 경제적 결핍을 물려준다면, 자녀에게 회복하기 어려운 치명적인 상처를 남길 수 있으며, 결국 가난의 굴레에서 영원히 벗어나지 못하게 될 가능성이 높아집니다. 초기 자본, 예를 들어 주식 계좌를 통해 쌓인 자산은 이런 불확실한 경제 환경에서 안정적인 출발점을 제공해, 더 큰 꿈을 추구할 수 있는 기반이 될 수 있습니다. 이에 대한 근거는 다음 섹션에서 상세하게 설명하겠습니다.</p>

<p> </p>

<h4 id="성장의-의미와-경제적-결핍의-상관관계"><strong>성장의 의미와 경제적 결핍의 상관관계</strong></h4>

<p>‘성장’이라는 개념이 정확히 무엇을 의미하는지 모호합니다. 귀하께서는 “스스로 성장을 멈추는 경우”를 언급하시며, 경제적 여유가 노력의 동기를 약화시킨다고 보시는 듯합니다. 그러나 성장의 정의는 사람마다 다를 수 있으며, 반드시 경제적 결핍에서만 비롯되는 것은 아닙니다. 가난한 사람이 반드시 성장을 이루리라는 보장이 없으며, 성장의 원동력과 가난의 여부는 특별한 상관관계가 없다는 것을 고려해야 합니다.</p>

<p>오히려 일반적인 통념과 다르게, 경제적 밑바탕이 있으면 안정적으로 도전할 수 있는 기회가 많아지는 것이 사실입니다. 예를 들어, 엔비디아 창업자 젠슨 황의 경우처럼 가난한 배경에서 성공한 사례도 있지만, 이는 예외적일 수 있으며, 실제로 많은 성공한 창업자들은 부유한 가정의 지원을 바탕으로 출발했습니다.</p>

<p>실제로, 부자 집안 출신이 새로운 창업 등에서 성공한 사례가 훨씬 더 많습니다. 마크 주커버그는 페이스북(현 메타)을 시작할 때 아버지로부터 10만 달러의 대출을 받았으며, 빌 게이츠는 부유하고 성공적인 부모님의 배경에서 자라 마이크로소프트를 창업했습니다. 일론 머스크 역시 부유한 가정에서 성장하며 테슬라와 스페이스X를 이끌었습니다. 한국에서도 카카오의 김범수 의장은 가난한 배경에서 성공했지만, 많은 스타트업 창업자들이 학벌이 좋고 중상층 이상의 안정된 환경에서 출발해 성공을 거두는 경우가 일반적입니다. 이러한 사례들은 경제적 여유가 성장을 방해하기보다는, 오히려 더 큰 성취를 가능하게 한다는 점을 보여줍니다.</p>

<p> </p>

<h4 id="굳이-경제적-궁핍은-물려주는-것은-불필요"><strong>굳이 ‘경제적 궁핍’은 물려주는 것은 불필요</strong></h4>

<p>부모의 역할은 자녀가 세상에 홀로 설 힘을 기르도록 돕는 것이라는 귀하의 말씀에 동의합니다. 다만, 이를 위해 경제적 결핍을 ‘선물’하는 대신, 적절한 자산과 장기적으로 인생에서 도움이 될만한 경제적인 안목을 제공하는 것을 우선으로 하여 책임감과 투자 교육을 병행하는 접근이 더 균형적일 수 있습니다. 투자 행위도 결국에는 밑천이 있어야 가능한 것입니다. 밑천이 없으면 빚을 내서 투자를 시작할 수 밖에 없으며, 이에 더해 경제적 관념이 부재된 상태라면 어떠한 투자를 해도 빚더미에 앉은 채 실패하게 될지도 모릅니다. 40대 이후에 돈이 필요하다는 점도 이해하지만, 앞서 언급한 사례들을 종합해 볼 때 20대부터의 최소한의 경제적 안정 및 자산에 대한 안목이 장기적으로 더 건강한 성장을 촉진할 가능성이 큽니다.</p>

<p>이 의견이 귀하의 생각에 도움이 되기를 바랍니다. 자녀 교육은 정답이 없으니, 각자의 가치관에 따라 최선을 다하는 것이 중요하다고 믿습니다.</p>

<p> </p>

<p>[rcblock id=”6686”]</p>]]></content><author><name></name></author><category term="Blog" /><category term="정보글" /><summary type="html"><![CDATA[아래 인터넷의 한 글에 대한 Grok(생성형 인공지능)이 생성한 의견입니다.]]></summary></entry></feed>